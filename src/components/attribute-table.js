import {
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Heading,
  Flex,
  Text,
  Button,
  Icon,
  Box,
  UnorderedList,
  ListItem,
} from "@chakra-ui/react";
import { AiFillCheckCircle } from "react-icons/ai";

import { IssuesContainer } from "./issue-container";

function SimpleListing({ attribute }) {
  return (
    <Flex direction="column" gap={2} m={0}>
      <Heading fontSize="sm" fontWeight="medium" textColor="gray.800">
        {attribute.name}
      </Heading>
      <Text
        fontSize="sm"
        fontWeight="normal"
        textColor="gray.700"
        overflowWrap="normal"
      >
        {attribute.value}
      </Text>

      {attribute.generated && (
        <Flex direction="column" mt={2}>
          <Text fontSize="xs" textColor="green.700">
            Generated by AI
          </Text>
          <Text
            fontSize="sm"
            fontWeight="normal"
            textColor="green.700"
            overflowWrap="normal"
            borderWidth={1}
            borderColor="green.700"
            p={1}
            borderRadius="md"
          >
            {attribute.generated}
          </Text>
        </Flex>
      )}
    </Flex>
  );
}

function PriceListing({ attribute }) {
  const getCompetitorPrices = (value) => {
    const parsedValue = JSON.parse(value);
    const competitorKeys = Object.keys(parsedValue["competitors"]);
    console.log(competitorKeys);

    const competitors = [];

    competitorKeys.forEach((key) => {
      competitors.push({
        brand: key,
        price: parsedValue["competitors"][key],
      });
    });

    return competitors;
  };

  return (
    <Flex direction="column" gap={2} m={0}>
      <Heading fontSize="sm" fontWeight="medium" textColor="gray.800">
        {attribute.name}
      </Heading>
      <UnorderedList spacing={1}>
        {getCompetitorPrices(attribute.value).map((item, index) => (
          <ListItem key={index}>
            <Text fontSize="sm">
              {item.brand}: {item.price}
            </Text>
          </ListItem>
        ))}
      </UnorderedList>
    </Flex>
  );
}

export function AttributeTable({ attributes, format = "simple", onGenerate }) {
  const handleGenerate = (name, text) => {
    if (name === "description") {
      onGenerate("description", text);
    } else {
      onGenerate("title", text);
    }
  };

  return (
    <Table
      background="white"
      borderRadius="md"
      variant="simple"
      size="md"
      layout="auto"
    >
      <Thead>
        <Tr>
          <Th fontSize="xs">ATTRIBUTE</Th>
          <Th fontSize="xs">ISSUES</Th>
          <Th fontSize="xs">ACTION</Th>
        </Tr>
      </Thead>
      <Tbody>
        {attributes.map((attribute, index) => (
          <Tr key={index}>
            <Td>
              <Box w="600px">
                {format === "simple" && (
                  <SimpleListing
                    attribute={{
                      name: attribute.name,
                      value: attribute.value,
                      generated: attribute.generated,
                    }}
                  />
                )}
                {format === "pricing" && (
                  <PriceListing
                    attribute={{ name: attribute.name, value: attribute.value }}
                  />
                )}
              </Box>
            </Td>
            <Td>
              <Box w="200px">
                {attribute.issues.length > 0 ? (
                  <IssuesContainer issues={attribute.issues} />
                ) : (
                  <Flex direction="row" alignItems="center" gap={2} w="100px">
                    <Icon
                      as={AiFillCheckCircle}
                      w="6"
                      h="6"
                      color="green.500"
                    />
                    <Text fontSize="sm" textColor="gray.700">
                      No Issues
                    </Text>
                  </Flex>
                )}
              </Box>
            </Td>
            <Td>
              {attribute.issues.length > 0 &&
                !attribute.generated &&
                attribute.name !== "Image Quality Analysis" && (
                  <Button
                    colorScheme="blue"
                    size="sm"
                    onClick={() =>
                      handleGenerate(attribute.name, attribute.value)
                    }
                  >
                    Generate using AI
                  </Button>
                )}
              {attribute.issues.length > 0 && attribute.generated && (
                <Flex direction="row" alignItems="center" gap={1}>
                  <Icon as={AiFillCheckCircle} w="6" h="6" color="green.500" />
                  <Text fontSize="xs" textColor="gray.700">
                    Actioned by AI.
                  </Text>
                </Flex>
              )}
            </Td>
          </Tr>
        ))}
      </Tbody>
    </Table>
  );
}
